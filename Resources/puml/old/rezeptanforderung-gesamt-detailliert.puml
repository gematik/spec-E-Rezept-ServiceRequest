@startuml

skinparam sequence {
    ArrowColor black
    ActorBorderColor black
    LifeLineBorderColor darkgray
    LifeLineBackgroundColor #ffffc0

    ParticipantBorderColor black
    ParticipantBackgroundColor #ffffc0
    ParticipantFontName Arial
    ParticipantFontSize 14
    ParticipantFontColor black

    ActorBackgroundColor #ffffc0
    ActorFontColor #303030
    ActorFontSize 14
    ActorFontName Arial

    BoxBorderColor gray
}

skinparam maxMessageSize 400

'actor Vertreter as Vert
actor "Mitarbeiter der \nPflegeeinrichtung" as Vert
participant "Primärsystem der \nPflegeeinrichtung" as PS_Pflege
participant "Verzeichnisdienst" as VZD
participant "KIM \nClientmodul" as Kim_cm #LightGreen
participant "KIM \nFachdienst" as Kim_fd #LightGreen
participant "Primärsystem \nverordnender \nLeistungserbringer" as PS_Arzt
'actor "Verordnender \nLeistungserbringer" as Arzt

title Rezeptanforderungen durch Pflegeeinrichtungen (Gesamtübersicht)
hide footbox
'autonumber


note right of PS_Pflege
<font color=red>UC besagt, Apotheke kann ebenfalls anfordern.
<font color=red>Wäre die Apo dann in der Rolle des Vertreters?
<font color=red>Falls ja: wahrscheinlich identischer Ablauf
<font color=red>wie mit PS_Pflege
end note

activate Vert
Vert -> PS_Pflege++: Bedarf erkennen aus Vormedikation()


PS_Pflege -> Vert++: Vormedikationen des Patienten präsentieren()
return :Liste der Auswahl aus Vormedikation

loop für jedes ausgewählte Element der Vormedikationen
    PS_Pflege -> PS_Pflege++: Verordnungsinformationen übernehmen()
    PS_Pflege -> PS_Pflege: Rezeptanforderung generieren(Verordnungsinformationen)
    PS_Pflege -> PS_Pflege: Rezeptanforderung konfigurieren(Bedarfsbegründung, Priorität, Restreichweite [opt], Referenz Vorrezept [opt])
end

PS_Pflege -> PS_Pflege++: Rezeptanforderungs-FHIR-Bundle generieren(Liste Rezeptanforderungen)
return :Rezeptanforderungs-FHIR-Bundle

PS_Pflege -> VZD++: KIM-Adresse des Empfängers ermitteln(Verordnender Leistungserbringer)
return :gültige Empfängeradresse

PS_Pflege -> PS_Pflege++: Mail generieren(Rezeptanforderungs-FHIR-Bundle, gültige Empfängeradresse, X-KIM-Header-Information, Medikationsplan [opt])
return :KIM-Mail

PS_Pflege -> Kim_cm++: KIM-Mail senden mit Rezeptanforderungs-FHIR-Bundle als Payload(KIM-Mail)

group #LightYellow KIM Standardkommunikation
ref over Kim_cm, Kim_fd #lightyellow
    KIM-Mail senden
end ref

return :Status
ref over Kim_cm, Kim_fd: KIM-Mail empfangen
end group


PS_Arzt -> Kim_cm++: Mails abrufen und X-KIM-Header-Information auswerten()
activate PS_Arzt
return :Mails

alt X-KIM-Dienstkennung="E-Rezept;Rezeptanforderung;V1.0"
    PS_Arzt -> Kim_cm++: KIM-MAil extrahieren(KIM-Mail)
'TODO Absender muss frei wählbar sein
    return :Rezeptanforderungs-FHIR-Bundle, :Absender

    PS_Arzt -> PS_Arzt++: Rezeptanforderungen extrahieren(Rezeptanforderungs-FHIR-Bundle)
    return :Liste Rezeptanforderungen
    loop für jedes Element der Liste Rezeptanforderungen
        PS_Arzt -> PS_Arzt++: Rezeptanforderung generieren und Patient zuordnen()
    end
end



@enduml