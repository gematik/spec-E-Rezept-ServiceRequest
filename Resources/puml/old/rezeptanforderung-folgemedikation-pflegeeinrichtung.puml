@startuml

skinparam sequence {
    ArrowColor black
    ActorBorderColor black
    LifeLineBorderColor darkgray
    LifeLineBackgroundColor #ffffc0

    ParticipantBorderColor black
    ParticipantBackgroundColor #ffffc0
    ParticipantFontName Arial
    ParticipantFontSize 14
    ParticipantFontColor black

    ActorBackgroundColor #ffffc0
    ActorFontColor #303030
    ActorFontSize 14
    ActorFontName Arial

    BoxBorderColor gray
}

skinparam maxMessageSize 300
title Rezeptanforderungen bei Folgemedikationen (z.B. Dauermedikation): (teil-)automatisierte Verarbeitung beim Pflegeeinrichtung oder anfordernder Apotheke
hide footbox
autonumber

actor "Mitarbeiter Pflege \noder Apotheke" as MA #BUSINESS
participant "Primärsystem der \nPflegeeinrichtung oder AVS" as PS #BUSINESS
participant "Verzeichnisdienst" as VZD #TECHNOLOGY
participant "KIM \nClientmodul" as Kim_cm #TECHNOLOGY
participant "KIM \nFachdienst" as Kim_fd #TECHNOLOGY
participant "E-Rezept-Fachdienst" as erpFD #APPLICATION

PS o-> PS: versicherten- und medikationsbezogenes Auslöseereignis, z.B. \nReichweitenende, Bedarfsfeststellung

activate PS
PS -> PS++: letzten relevanten Vorgang ermitteln(Versicherter.<font color=red>Verordnung_Dispensierung(LATEST). Strukturierter_Verordnungsdatensatz)
return :Vorheriges_Rezept.Rezept_ID

alt lokal im PS
    PS -> PS++: Verordnungsinhalt zusammenstellen(Vorheriges_Rezept.Rezept_ID)
    return :Verordnungsinhalt
else aus Vorgängerverordnung herauskopieren TODO
end


alt KIM-Adresse des Empfängers ermitteln
    PS -> VZD++: KIM-Adresse abfragen(Telematik-ID des Verordnenden <font color=red>ODER Suchkriterien des Verordnenden</font>)
    return :gültige KIM-Adresse
else KIM-Adresse des Empfängers anhand Vorgängerverordnung abfragen
    PS -> VZD++: KIM-Adresse abfragen(Versicherter.<font color=red>Verordnung_Dispensierung(LATEST). Strukturierter_Verordnungsdatensatz.requester.identifier=Telematik-ID</font>)
    return :gültige KIM-Adresse
else KIM-Adresse aus Bestandsdaten des PS übernehmen
    PS -> PS++: KIM-Adresse des Empfängers lokal ermitteln
    return :gültige KIM-Adresse

end

PS -> PS++: Rezeptanforderung generieren(NEW Vorgangs_ID, Verordnungsinhalt)

opt Freigabeverfahren durch Mitarbeiter
    alt alles ok
        PS -> MA++: Prüf- und Korrekturmöglichkeit anbieten (Rezeptanforderung)
        MA -> MA: Verordnungsinhalt prüfen
        return :Freigabe
    else Korrektur notwendig
        PS -> MA++: Prüf- und Korrekturmöglichkeit anbieten (Rezeptanforderung)
        MA -> MA: Verordnungsinhalt prüfen
        MA -> MA: Korrektur vornehmen
        return :Verordnungsinhalt_korrigiert
    end
end

PS -> PS: Rezeptanforderung konfigurieren(Prioritaet, Adressat_der_Rezeptanforderung, Adressat_der_Rezeptuebermittlung, Patienteninformationen, Rezept_ID, Bedarfsbegruendung, Restreichweite)
return :Rezeptanforderung



PS -> PS++: FHIR-Bundle "GEM_PR_ERP_MEDREQ_RequestBundle" generieren(Rezeptanforderung)
return :GEM_PR_ERP_MEDREQ_RequestBundle

PS -> PS++: Mail-Body generieren(<font color=red>Nur-Text-Zusammenfassung</font>)
return :Mail-Body
PS -> PS++: Mail-MIME-Attachment generieren(GEM_PR_ERP_MEDREQ_RequestBundle)
return :Mail-Attachment

PS -> PS++: Mail generieren(Mail-Body, Mail-Attachment, gültige KIM-Adresse, X-KIM-Header-Information:=X-KIM-Dienstkennung="E-Rezept;Rezeptanforderung;V1.0")
return :KIM-Mail

PS -> Kim_cm++: KIM-Mail senden mit GEM_PR_ERP_MEDREQ_RequestBundle als Payload(KIM-Mail)

group #LightYellow KIM Standardkommunikation
ref over Kim_cm, Kim_fd #lightyellow
    KIM-Mail senden
end ref

return :Status
end group



@enduml