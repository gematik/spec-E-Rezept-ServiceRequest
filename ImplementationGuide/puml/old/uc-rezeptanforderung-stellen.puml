@startuml

skinparam sequence {
    ArrowColor black
    ActorBorderColor black
    LifeLineBorderColor darkgray
    LifeLineBackgroundColor #ffffc0

    ParticipantBorderColor black
    ParticipantBackgroundColor #ffffc0
    ParticipantFontName Arial
    ParticipantFontSize 14
    ParticipantFontColor black

    ActorBackgroundColor #ffffc0
    ActorFontColor #303030
    ActorFontSize 14
    ActorFontName Arial

    BoxBorderColor gray
}

skinparam maxMessageSize 450
title Stellen einer Rezeptanforderung durch Pflegeeinrichtung oder beauftragte Apotheke
hide footbox
autonumber

actor "Mitarbeiter Pflege \noder Apotheke" as MA #BUSINESS
participant "Primärsystem der \nPflegeeinrichtung oder AVS" as PS #BUSINESS
participant "Verzeichnisdienst" as VZD #TECHNOLOGY
participant "KIM \nClientmodul" as Kim_cm #TECHNOLOGY
participant "KIM \nFachdienst" as Kim_fd #TECHNOLOGY

PS o-> PS: versicherten- und medikationsbezogenes Auslöseereignis, z.B. \nReichweitenende, Bedarfsfeststellung

activate PS
PS -> PS++: letzten relevanten Rezeptvorgang des Versicherten ermitteln(Versicherter)
return :Versicherter.Vorgang


alt Versicherter.Vorgang = NULL

    PS -> MA: Verordnungsinhalt abfragen()
    activate MA
    MA -> MA: Veordnungsinhalt erfassen()
    return :Verordnungsinhalt
    deactivate MA

else Versicherter.Vorgang NOT NULL

    PS -> PS++: Verordnungsinhalt zusammenstellen(Versicherter.Vorgang.GEM_PR_ERP_MEDREQ_DispenseInformationBundle. KBV_PR_ERP_Prescription.KBV_PR_ERP_Medication_*)
    return :Verordnungsinhalt

    opt
        PS -> MA: Verordnungsinhalt vorschlagen()
        activate MA
        MA -> MA: Veordnungsinhalt modifizieren()
        return :Verordnungsinhalt
        deactivate MA
    end

end

PS -> PS++: Vorgang anlegen(NEW Vorgangs_ID)

PS -> PS++: Rezeptanforderung generieren(Verordnungsinhalt)

PS -> PS: Rezeptanforderung konfigurieren(Prioritaet, Adressat_der_Rezeptanforderung, Adressat_der_Rezeptuebermittlung, Patienteninformationen, Vorheriges_Rezept, Restreichweite)
return :Rezeptanforderung

alt Keine gültige KIM-Adresse des Verordnenden des Versicherten bekannt

    PS -> VZD++#TECHNOLOGY: KIM-Adresse abfragen(Suchkriterien des Verordnenden)
        note left
        Suchkriterien z.B. Name, 
        Telematik-ID des Verordnenden,
        Adressinformationen o.ä.
        end note
    return :gültige KIM-Adresse

else >= 1 Vorgängerverordnungen zum Versicherten vorhanden UND VZD-Zugriff möglich

    PS -> VZD++#TECHNOLOGY: KIM-Adresse abfragen(Versicherter.Vorgang.GEM_PR_ERP_MEDREQ_DispenseInformationBundle. KBV_PR_ERP_Prescription.KBV_PR_FOR_Practitioner. identifier=Telematik-ID)
    return :gültige KIM-Adresse

else >= 1 Vorgängerverordnungen zum Versicherten vorhanden UND VZD-Zugriff nicht möglich

    PS -> PS++: KIM-Adresse abfragen(Versicherter.Vorgang.GEM_PR_ERP_MEDREQ_ResponseBundle. GEM_PR_ERP_MEDREQ_Organization[Bundle.entry=PrescribingOrganization]. telecom.value)
    return :gültige KIM-Adresse

end

PS -> PS++: FHIR-Bundle "GEM_PR_ERP_MEDREQ_RequestBundle" generieren(Rezeptanforderung)
return :GEM_PR_ERP_MEDREQ_RequestBundle

PS -> PS++: Mail-MIME-Attachment generieren(GEM_PR_ERP_MEDREQ_RequestBundle)
return :Mail-Attachment

PS -> PS++: Mail generieren(Mail-Body, Mail-Attachment, gültige KIM-Adresse, X-KIM-Header-Information:=X-KIM-Dienstkennung="E-Rezept;Rezeptanforderung;v1.0")
return :KIM-Mail

PS -> Kim_cm++#TECHNOLOGY: KIM-Mail senden mit GEM_PR_ERP_MEDREQ_RequestBundle als Payload(KIM-Mail)

group #LightYellow KIM Standardkommunikation
ref over Kim_cm, Kim_fd #lightyellow
    KIM-Mail senden
end ref

return :Status
end group

@enduml